/*
 * This file is generated by jOOQ.
 */
package org.example.businesspack.bd.tables;


import java.util.function.Function;

import org.example.businesspack.bd.DefaultSchema;
import org.example.businesspack.bd.Keys;
import org.example.businesspack.bd.tables.records.UserDataRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserData extends TableImpl<UserDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_data</code>
     */
    public static final UserData USER_DATA = new UserData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDataRecord> getRecordType() {
        return UserDataRecord.class;
    }

    /**
     * The column <code>user_data.id</code>.
     */
    public final TableField<UserDataRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>user_data.telegram_name</code>.
     */
    public final TableField<UserDataRecord, String> TELEGRAM_NAME = createField(DSL.name("telegram_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>user_data.email</code>.
     */
    public final TableField<UserDataRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    private UserData(Name alias, Table<UserDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserData(Name alias, Table<UserDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user_data</code> table reference
     */
    public UserData(String alias) {
        this(DSL.name(alias), USER_DATA);
    }

    /**
     * Create an aliased <code>user_data</code> table reference
     */
    public UserData(Name alias) {
        this(alias, USER_DATA);
    }

    /**
     * Create a <code>user_data</code> table reference
     */
    public UserData() {
        this(DSL.name("user_data"), null);
    }

    public <O extends Record> UserData(Table<O> child, ForeignKey<O, UserDataRecord> key) {
        super(child, key, USER_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<UserDataRecord> getPrimaryKey() {
        return Keys.USER_DATA__PK_USER_DATA;
    }

    @Override
    public UserData as(String alias) {
        return new UserData(DSL.name(alias), this);
    }

    @Override
    public UserData as(Name alias) {
        return new UserData(alias, this);
    }

    @Override
    public UserData as(Table<?> alias) {
        return new UserData(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserData rename(String name) {
        return new UserData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserData rename(Name name) {
        return new UserData(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserData rename(Table<?> name) {
        return new UserData(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
