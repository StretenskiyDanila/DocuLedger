/*
 * This file is generated by jOOQ.
 */
package org.example.businesspack.bd.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.example.businesspack.bd.DefaultSchema;
import org.example.businesspack.bd.Keys;
import org.example.businesspack.bd.tables.records.JournalWorkRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JournalWork extends TableImpl<JournalWorkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>journal_work</code>
     */
    public static final JournalWork JOURNAL_WORK = new JournalWork();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JournalWorkRecord> getRecordType() {
        return JournalWorkRecord.class;
    }

    /**
     * The column <code>journal_work.id</code>.
     */
    public final TableField<JournalWorkRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>journal_work.client</code>.
     */
    public final TableField<JournalWorkRecord, String> CLIENT = createField(DSL.name("client"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>journal_work.work_date</code>.
     */
    public final TableField<JournalWorkRecord, LocalDate> WORK_DATE = createField(DSL.name("work_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field(DSL.raw("current_date"), SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>journal_work.maintenance_id</code>.
     */
    public final TableField<JournalWorkRecord, Integer> MAINTENANCE_ID = createField(DSL.name("maintenance_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>journal_work.person</code>.
     */
    public final TableField<JournalWorkRecord, Integer> PERSON = createField(DSL.name("person"), SQLDataType.INTEGER.nullable(false), this, "");

    private JournalWork(Name alias, Table<JournalWorkRecord> aliased) {
        this(alias, aliased, null);
    }

    private JournalWork(Name alias, Table<JournalWorkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>journal_work</code> table reference
     */
    public JournalWork(String alias) {
        this(DSL.name(alias), JOURNAL_WORK);
    }

    /**
     * Create an aliased <code>journal_work</code> table reference
     */
    public JournalWork(Name alias) {
        this(alias, JOURNAL_WORK);
    }

    /**
     * Create a <code>journal_work</code> table reference
     */
    public JournalWork() {
        this(DSL.name("journal_work"), null);
    }

    public <O extends Record> JournalWork(Table<O> child, ForeignKey<O, JournalWorkRecord> key) {
        super(child, key, JOURNAL_WORK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<JournalWorkRecord, Integer> getIdentity() {
        return (Identity<JournalWorkRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JournalWorkRecord> getPrimaryKey() {
        return Keys.JOURNAL_WORK__PK_JOURNAL_WORK;
    }

    @Override
    public List<ForeignKey<JournalWorkRecord, ?>> getReferences() {
        return Arrays.asList(Keys.JOURNAL_WORK__FK_JOURNAL_WORK_PK_MAINTENANCE, Keys.JOURNAL_WORK__FK_JOURNAL_WORK_PK_PERSON);
    }

    private transient Maintenance _maintenance;
    private transient Person _person;

    /**
     * Get the implicit join path to the <code>maintenance</code> table.
     */
    public Maintenance maintenance() {
        if (_maintenance == null)
            _maintenance = new Maintenance(this, Keys.JOURNAL_WORK__FK_JOURNAL_WORK_PK_MAINTENANCE);

        return _maintenance;
    }

    /**
     * Get the implicit join path to the <code>person</code> table.
     */
    public Person person() {
        if (_person == null)
            _person = new Person(this, Keys.JOURNAL_WORK__FK_JOURNAL_WORK_PK_PERSON);

        return _person;
    }

    @Override
    public JournalWork as(String alias) {
        return new JournalWork(DSL.name(alias), this);
    }

    @Override
    public JournalWork as(Name alias) {
        return new JournalWork(alias, this);
    }

    @Override
    public JournalWork as(Table<?> alias) {
        return new JournalWork(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JournalWork rename(String name) {
        return new JournalWork(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JournalWork rename(Name name) {
        return new JournalWork(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JournalWork rename(Table<?> name) {
        return new JournalWork(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, LocalDate, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super LocalDate, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super LocalDate, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
