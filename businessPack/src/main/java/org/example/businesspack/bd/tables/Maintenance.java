/*
 * This file is generated by jOOQ.
 */
package org.example.businesspack.bd.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.example.businesspack.bd.DefaultSchema;
import org.example.businesspack.bd.Keys;
import org.example.businesspack.bd.tables.records.MaintenanceRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Maintenance extends TableImpl<MaintenanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>maintenance</code>
     */
    public static final Maintenance MAINTENANCE = new Maintenance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaintenanceRecord> getRecordType() {
        return MaintenanceRecord.class;
    }

    /**
     * The column <code>maintenance.id</code>.
     */
    public final TableField<MaintenanceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>maintenance.name</code>.
     */
    public final TableField<MaintenanceRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>maintenance.amount</code>.
     */
    public final TableField<MaintenanceRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    private Maintenance(Name alias, Table<MaintenanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Maintenance(Name alias, Table<MaintenanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>maintenance</code> table reference
     */
    public Maintenance(String alias) {
        this(DSL.name(alias), MAINTENANCE);
    }

    /**
     * Create an aliased <code>maintenance</code> table reference
     */
    public Maintenance(Name alias) {
        this(alias, MAINTENANCE);
    }

    /**
     * Create a <code>maintenance</code> table reference
     */
    public Maintenance() {
        this(DSL.name("maintenance"), null);
    }

    public <O extends Record> Maintenance(Table<O> child, ForeignKey<O, MaintenanceRecord> key) {
        super(child, key, MAINTENANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<MaintenanceRecord, Integer> getIdentity() {
        return (Identity<MaintenanceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MaintenanceRecord> getPrimaryKey() {
        return Keys.MAINTENANCE__PK_MAINTENANCE;
    }

    @Override
    public List<UniqueKey<MaintenanceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.MAINTENANCE__UK_MAINTENANCE_73785362);
    }

    @Override
    public Maintenance as(String alias) {
        return new Maintenance(DSL.name(alias), this);
    }

    @Override
    public Maintenance as(Name alias) {
        return new Maintenance(alias, this);
    }

    @Override
    public Maintenance as(Table<?> alias) {
        return new Maintenance(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Maintenance rename(String name) {
        return new Maintenance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Maintenance rename(Name name) {
        return new Maintenance(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Maintenance rename(Table<?> name) {
        return new Maintenance(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
