/*
 * This file is generated by jOOQ.
 */
package org.example.businesspack.bd.tables;


import java.math.BigDecimal;
import java.util.function.Function;

import org.example.businesspack.bd.DefaultSchema;
import org.example.businesspack.bd.Keys;
import org.example.businesspack.bd.tables.records.DataWorkRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataWork extends TableImpl<DataWorkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data_work</code>
     */
    public static final DataWork DATA_WORK = new DataWork();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataWorkRecord> getRecordType() {
        return DataWorkRecord.class;
    }

    /**
     * The column <code>data_work.id</code>.
     */
    public final TableField<DataWorkRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>data_work.name</code>.
     */
    public final TableField<DataWorkRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>data_work.unit_meas</code>.
     */
    public final TableField<DataWorkRecord, String> UNIT_MEAS = createField(DSL.name("unit_meas"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>data_work.count</code>.
     */
    public final TableField<DataWorkRecord, Integer> COUNT = createField(DSL.name("count"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>data_work.price</code>.
     */
    public final TableField<DataWorkRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>data_work.vat</code>.
     */
    public final TableField<DataWorkRecord, BigDecimal> VAT = createField(DSL.name("vat"), SQLDataType.NUMERIC(3, 2), this, "");

    /**
     * The column <code>data_work.summa</code>.
     */
    public final TableField<DataWorkRecord, BigDecimal> SUMMA = createField(DSL.name("summa"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>data_work.group</code>.
     */
    public final TableField<DataWorkRecord, String> GROUP = createField(DSL.name("group"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>data_work.tab</code>.
     */
    public final TableField<DataWorkRecord, String> TAB = createField(DSL.name("tab"), SQLDataType.VARCHAR.nullable(false), this, "");

    private DataWork(Name alias, Table<DataWorkRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataWork(Name alias, Table<DataWorkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data_work</code> table reference
     */
    public DataWork(String alias) {
        this(DSL.name(alias), DATA_WORK);
    }

    /**
     * Create an aliased <code>data_work</code> table reference
     */
    public DataWork(Name alias) {
        this(alias, DATA_WORK);
    }

    /**
     * Create a <code>data_work</code> table reference
     */
    public DataWork() {
        this(DSL.name("data_work"), null);
    }

    public <O extends Record> DataWork(Table<O> child, ForeignKey<O, DataWorkRecord> key) {
        super(child, key, DATA_WORK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<DataWorkRecord, Integer> getIdentity() {
        return (Identity<DataWorkRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DataWorkRecord> getPrimaryKey() {
        return Keys.DATA_WORK__PK_DATA_WORK;
    }

    @Override
    public DataWork as(String alias) {
        return new DataWork(DSL.name(alias), this);
    }

    @Override
    public DataWork as(Name alias) {
        return new DataWork(alias, this);
    }

    @Override
    public DataWork as(Table<?> alias) {
        return new DataWork(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataWork rename(String name) {
        return new DataWork(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataWork rename(Name name) {
        return new DataWork(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataWork rename(Table<?> name) {
        return new DataWork(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, Integer, BigDecimal, BigDecimal, BigDecimal, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Integer, ? super String, ? super String, ? super Integer, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Integer, ? super String, ? super String, ? super Integer, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
