/*
 * This file is generated by jOOQ.
 */
package org.example.businesspack.bd;


import org.example.businesspack.bd.tables.DataWork;
import org.example.businesspack.bd.tables.JournalWork;
import org.example.businesspack.bd.tables.Maintenance;
import org.example.businesspack.bd.tables.Person;
import org.example.businesspack.bd.tables.records.DataWorkRecord;
import org.example.businesspack.bd.tables.records.JournalWorkRecord;
import org.example.businesspack.bd.tables.records.MaintenanceRecord;
import org.example.businesspack.bd.tables.records.PersonRecord;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DataWorkRecord> DATA_WORK__PK_DATA_WORK = Internal.createUniqueKey(DataWork.DATA_WORK, DSL.name("pk_data_work"), new TableField[] { DataWork.DATA_WORK.ID }, true);
    public static final UniqueKey<JournalWorkRecord> JOURNAL_WORK__PK_JOURNAL_WORK = Internal.createUniqueKey(JournalWork.JOURNAL_WORK, DSL.name("pk_journal_work"), new TableField[] { JournalWork.JOURNAL_WORK.ID }, true);
    public static final UniqueKey<MaintenanceRecord> MAINTENANCE__PK_MAINTENANCE = Internal.createUniqueKey(Maintenance.MAINTENANCE, DSL.name("pk_maintenance"), new TableField[] { Maintenance.MAINTENANCE.ID }, true);
    public static final UniqueKey<MaintenanceRecord> MAINTENANCE__UK_MAINTENANCE_73785362 = Internal.createUniqueKey(Maintenance.MAINTENANCE, DSL.name("uk_maintenance_73785362"), new TableField[] { Maintenance.MAINTENANCE.NAME }, true);
    public static final UniqueKey<PersonRecord> PERSON__PK_PERSON = Internal.createUniqueKey(Person.PERSON, DSL.name("pk_person"), new TableField[] { Person.PERSON.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<JournalWorkRecord, MaintenanceRecord> JOURNAL_WORK__FK_JOURNAL_WORK_PK_MAINTENANCE = Internal.createForeignKey(JournalWork.JOURNAL_WORK, DSL.name("fk_journal_work_pk_maintenance"), new TableField[] { JournalWork.JOURNAL_WORK.MAINTENANCE_ID }, Keys.MAINTENANCE__PK_MAINTENANCE, new TableField[] { Maintenance.MAINTENANCE.ID }, true);
    public static final ForeignKey<JournalWorkRecord, PersonRecord> JOURNAL_WORK__FK_JOURNAL_WORK_PK_PERSON = Internal.createForeignKey(JournalWork.JOURNAL_WORK, DSL.name("fk_journal_work_pk_person"), new TableField[] { JournalWork.JOURNAL_WORK.PERSON }, Keys.PERSON__PK_PERSON, new TableField[] { Person.PERSON.ID }, true);
}
